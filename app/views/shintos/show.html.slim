p#notice = notice

p
  strong 神社名:
  = @shinto.name

p
  strong 画像:
  img src = "#{@shinto.image}.jpg"

p
  strong 住所:
  = @shinto.address

p
  strong 総本山:
  = @shinto.origin_shrine.html_safe

p
  strong 起源:
  = @shinto.origin_term


p
  strong 由緒
  = @shinto.origin_history

p
  strong 主祭神: 
  = @shinto.kamisama.html_safe

p
  strong 公式URL:
  = @shinto.original_url

/ - if current_user.favorite_shinto_shintos[0] == @shinto
/   strong 神社パラメーターを追加する:
/   = link_to "追加する", new_favorite_shinto_shinto_param_path(current_user.favorite_shintos[0].id) 
/ br
/ - if @shinto.favorite_shintos[0].present?
/   - if @shinto.favorite_shintos[0].shinto_params.present?
/     - @shinto.favorite_shintos[0].shinto_params.each do |shinto_param|
/       = shinto_param.title 
/       = shinto_param.points 
/       = shinto_param.memo 
/       br
  
/ br

#comments_area
  /! 投稿されたコメント一覧をブログの詳細ページに表示するためのrender
  = render partial: 'index', locals: { shinto_user_params: @shinto_user_params, shinto: @shinto }
/! コメント入力欄をブログの詳細ページに表示するためのrender
= render partial: 'form', locals: { shinto_user_param: @shinto_user_param, shinto: @shinto }
/ = link_to '編集', edit_blog_path(@blog)
/ | \
/ | \#{link_to '戻る', blogs_path}


= link_to 'Back', shintos_path

#map style="width: 800px; height: 400px;"

javascript:
  handler = Gmaps.build('Google');
  handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
    markers = handler.addMarkers(#{raw @hash.to_json});
    handler.bounds.extendWith(markers);
    handler.fitMapToBounds();
    handler.getMap().setZoom(14);
  });